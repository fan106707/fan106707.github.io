[{"title":"Node.js实习 Day7","date":"2017-06-15T03:11:11.000Z","path":"2017/06/15/day7/","text":"目标： 在发表文章时添加 markdown 实时预览功能 学习爬虫的基本概念（选做） 学习简单的 Node 爬虫（选做） part1 markdown预览在发表文章和编辑文章处添加 markdown 实时预览功能：先从网上下载一个用于Markdown解析的JS文件，存入目录；在header.ejs中导入markdown.js文件，footer.ejs中加入实现markdown预览的功能函数；修改编辑模块中的部分代码，使其监听到输入更新则调用实时预览函数，并适当调整页面比例即可。预览的效果是这样的： part2 爬虫学习爬虫的基本概念，学习简单的学习爬虫的基本概念，学习简单的 Node 爬虫：网络爬虫是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。Node.js编写爬虫通常用到三个依赖，分别是 express，superagent 和 cheerio。superagent 是一个 http 方面的库，可以发起 get 或 post 请求。cheerio可以理解成一个 Node.js 版的 jquery，用来从网页中以 css selector 取数据，使用方式跟 jquery 一样。 总结以前人们喜欢说，万事开头难，现在是有始有终地做一件事更难。生产实习从报名参加开始到今天写下这份总结，恰好三个月的时间，除头去尾后也将近有一个学期了，这三个月里的学习状态，若下笔则必须忠于内心，那我是不敢说从始至终保持孜孜不倦的，但心态虽几经曲折，整体也还算积极进取吧。再仔细回想大学这三年来所参加过的实践教学活动，当然也就无非是金工实习、电装实习和生产实习，那生产实习的内容简直比另外两个好太多了，主要是专业知识相关性更强，能切实学到一些将来走上社会的用得上的必备技能。实习令我比较感兴趣，也算投入挺多心思，所以先给自己的状态打85分，扣掉的十五分的原因是曾经因为觉得乏味而松懈过。起初自然是抱着澎湃的内心踏上实习专车的，不过第一二周的内容太枯燥，几乎磨掉了我大半的热情。一二周主要是学习JavaScript语言，还有了解几个重要的相关概念，熟悉环境。给我的体会是大部分时间都在输出，对所学的知识不能及时地反馈，看不见具体的成效。当然也是，哪一门语言刚开始看的时候不是枯燥乏味的呢，也许是因为我的浅尝辄止，没有深入体会到它的精髓。不过相对来说第三周的内容就很有意思了。GitHub很吸引我，有很多优秀的开源项目，不过对于现在的我来说，在于它有很多“适龄”的教程，而且提供源代码，有助于学习和理解，嗯还有助于强行提高英语阅读水平。以前都是看别人的技术博客，经过这一周的内容我终于也成功搭建了属于自己一个小小博客，其实内心是很激动的！即使它现在还是很简陋，连自己的专属域名都没有。到这里我觉得或许可以考虑将第三周的实习内容往前移，了解相关概念和环境后，可以接着搭建静态博客，毕竟都是现成的，搭建过程又没有技术门槛。静态博客搭建成功后可以用于记录往后每一周的学习笔记，最好是强制性要求，在投入时间和精力的时候可以看得见产出，效果会好点吧。整个实习过程其实也并不那么顺利了，期间踩了无数的坑，只是当时没有好好记录所以现在也想不起来都是些什么乱七八槽的报错了，感觉什么样的都有吧。每次报错，首先检查是不是哪一步没按着教程走，不行再查看报错的信息，是哪个文件哪一行写得不对，或者是缺少了什么。一遍遍地百度，谷歌，看各种经验帖，又强行提高英语能力了。依稀记得是在尝试部署了N+N次之后，代码已经改到我早都不记得原来是什么样了，那些执着如一的红色ERROR一遍遍跳动在黑色的框框里，我仿佛感受到了近乎绝望的挫败感。还好我始终坚信，语言是没有错的，浏览器是没有错的，教程也没有错的，错的都是我的代码和我的操作。仔细检查，多次尝试，总会成功的。对我来说最难的内容是在搭建动态博客的环节，虽然表面上它最简单，不需要自己码代码，也几乎没什么报错。但其中的包含的知识点又多又杂，一个函数看不懂要查好久的文档，一个概念不理解也要百度好多个页面。更惨的是休息了几天没看，想再继续下去的时候前面又快忘记完了，无奈只好推翻重来了。庆幸的是这只是一个时间的问题。最后的Extra任务西电新闻网的爬虫没有做出来，一是不太理解页面源代码的构成，仍需认真学习HTML/CSS部分的内容。二是对JS还是不熟，第一二周的基础知识没学好，后面的拓展内容就很难展开了。所以说想要有始有终地做一件事不容易，而这应是我必须学会的。总结整个实习过程，收获有两个： 体验了项目开发的过程，提高了实践能力和学习能力。 遇到困难要勇于面对，并尽力解决。唯有逃避是解决不了问题。 最后，特别感谢陕西尚品信息科技有限公司提供的实习机会。","tags":[{"name":"实习","slug":"实习","permalink":"http://fan106707@github.io/tags/实习/"},{"name":"nodejs","slug":"nodejs","permalink":"http://fan106707@github.io/tags/nodejs/"},{"name":"mongodb","slug":"mongodb","permalink":"http://fan106707@github.io/tags/mongodb/"},{"name":"express","slug":"express","permalink":"http://fan106707@github.io/tags/express/"}]},{"title":"Node.js实习 Day5 && Day6（别点我）","date":"2017-06-14T23:30:11.000Z","path":"2017/06/15/day5&day6/","text":"目标： 按照 N-Blog 教程，完成第四章。 掌握 Web 前端的概念，知道 CSS HTML JavaScript 三者在 Web 前端的作用。 part1 按照教程搭建博客就不贴过程了，从新建项目文件，配置基本信息，分析功能模块和路由设计，到页面设计，连接数据库，逐个添加各个功能模块，测试等，过程还是满繁琐的。代码是现成的，实现并不困难，倒是理解的过程需要花很多时间。划几个重难点：A. 配置与代码分离很重要，因此要将配置写到一个单独配置文件里。B. 博客页面是后端渲染的，所以只通过简单的&lt;a&gt;(GET)和&lt;form&gt;(POST)与后端进行交互。C. 通过引入 express-session 中间件实现对会话的支持。D. 使用 jQuery + Semantic-UI 实现前端页面的设计，将模板拆分成一些组件，然后使用 ejs 的 include 方法将组件组合起来进行渲染。E. 使用 Mongolass 模块操作 mongodb 进行增删改查，优点是简单，强大。F. 使用 markdown 解析文章的内容，所以在发表文章的时候可使用 markdown 语法。G.编写另外的错误界面，使程序出错时不会在浏览器输出错误信息。 贴出成果吧： 这是动态博客开源地址：https://github.com/fan106707/myblog Web前端的概念Web前端开发就是利用X/HTML、CSS、JavaScript、Flash等各种Web技术进行客户端开发。前端渲染和后端渲染：同意这篇博文","tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://fan106707@github.io/tags/nodejs/"},{"name":"mongodb","slug":"mongodb","permalink":"http://fan106707@github.io/tags/mongodb/"},{"name":"学习","slug":"学习","permalink":"http://fan106707@github.io/tags/学习/"},{"name":"express","slug":"express","permalink":"http://fan106707@github.io/tags/express/"}]},{"title":"Node.js实习 Day4-MongoDB & Express（试试点这个）","date":"2017-06-14T12:20:20.000Z","path":"2017/06/14/day4_mongodb/","text":"目标： 安装 MongoDB，并学会使用命令行进行启动 熟悉 MongoDB Shell，能够在 MongoDB Shell 中进行一些常用操作 完成 N-Blog教程的前三章。 part1 mongodbd安装与熟悉 MongoDB是一个基于分布式文件存储的数据库。 由C++语言编写，旨在为WEB应用提供可扩展的高性能数据存储解决方案。 MongoDB 是一个介于关系数据库和非关系数据库之间的产品， 是非关系数据库当中功能最丰富，最像关系数据库的。 它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。 Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言， 几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。 Step1: 下载安装前往mongodb官网选择合适自己的安装包即可。 我选的是windows 64-bit的，安装过程自定义安装途径到D盘。安装好之后是创建数据目录，我在D盘创建了一个data的目录，然后在data目录里创建db目录。 接下来是命令行下运行 MongoDB 服务器从MongoDB目录的bin目录下打开命令行，输入mongod.exe --dbpath d:\\data\\db执行mongod.exe文件。 将MongoDB服务器注册为Windows服务从MongoDB目录的bin目录下打开命令行，输入以下命令： mongod.exe --bind_ip yourIPadress --logpath &quot;d:\\data\\log\\mongodb.log&quot; --logappend --dbpath &quot;d:\\data\\db&quot; --port yourPortNumber --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install 参数说明如下： 参数 描述 --bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP --logpath 指定MongoDB日志文件，注意是指定文件不是目录 --logappend 使用追加的方式写日志 --dbpath 指定数据库路径 --port 指定服务端口号，默认端口27017 --serviceName 指定服务名称 --serviceDisplayName 指定服务名称，有多个mongodb服务时执行。 --install 指定作为一个Windows服务安装 启动mongodb后台管理shellMongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。bin目录下，执行mongo.exe即可。 Step2：数据库的创建与删除 创建数据库的语法：use DATABASE_NAME如果该数据库不存在，则创建数据库，否则切换到指定数据库。 删除数据库的语法：db.dropDatabase() 删除当前数据库 此外，可以用db命令查看当前数据库；用show dbs查看所有数据库。 Step3：文档相关插入文档 MongoDB 使用 insert() 或 save() 方法向集合中插入文档语法：db.COLLECTION_NAME.insert(document)，具体实例看下面 &gt; db.col.insert({title: &apos;MongoDB&apos;, description: &apos;MongoDB 是一个 Nosql 数据库&apos;,by: &apos;fan106707&apos;}) 其中，col 是集合名，如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档。可以输入db.col.find()查看已插入文档： &gt; db.col.find() { &quot;_id&quot; : ObjectId(&quot;590e9885b0f84710b59ab4cb&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;fan106707&quot;} &gt; 或者还可以先将数据定义为一个变量，如doc=({...})，再通过db.col.insert(doc)来插入，效果和刚才一样的。 更新文档 MongoDB 中可以使用 update() 方法来更新集合中的文档。语法：db.collection.update( criteria, objNew, upsert, multi )update()接受的四个参数含义如下： criteria : update的查询条件哪些记录需要更新，类似于SQL update语句的where子句。 objNew : update的对象和一些更新的操作符如$,$inc等等，也可以理解为SQL update语句的set子句。 upsert : 可选，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。 multi : 可选，默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。注意：multi只对$操作有效。示例： &gt; db.col.insert(doc) WriteResult({ &quot;nInserted&quot; : 1 }) &gt; db.col.find() { &quot;_id&quot; : ObjectId(&quot;591063256ee987ff66b6b6f8&quot;), &quot;title&quot; : &quot;mongodb&quot;, &quot;description&quot; : &quot;mongodb 是一个NoSQL数据库&quot;, &quot;by&quot; : &quot;fan106707&quot; } &gt; db.col.update({&quot;title&quot;:&quot;mongodb&quot;},{$set:{&quot;by&quot;:&quot;FAN106707&quot;}}) WriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 }) &gt; db.col.find() { &quot;_id&quot; : ObjectId(&quot;591063256ee987ff66b6b6f8&quot;), &quot;title&quot; : &quot;mongodb&quot;, &quot;description&quot; : &quot;mongodb 是一个NoSQL数据库&quot;, &quot;by&quot; : &quot;FAN106707&quot; } &gt; MongoDB中还可以使用save()命令来完成更新操作语法： db.collection.save( &lt;document&gt;, { writeConcern: &lt;document&gt; } ) 参数说明： document : 文档数据。 writeConcern :可选，抛出异常的级别。 具体的还有更多详细的用法可以参考mongodb更新操作啦啦啦 删除文档MongoDB 使用remove()函数是来移除集合中的数据。语法: db.collection.remove( &lt;query&gt;, &lt;justOne&gt; ) 参数说明： query :（可选）删除的文档的条件。 justOne : （可选）如果设为 true 或 1，则只删除一个文档。 实例： &gt; db.col.find() { &quot;_id&quot; : ObjectId(&quot;590e9885b0f84710b59ab4cb&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;description&quot; : &quot;MongoD是一个NoSQL数据库&quot;, &quot;by&quot; : &quot;fan106707&quot; } { &quot;_id&quot; : ObjectId(&quot;590e99f7b0f84710b59ab4cc&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;description&quot; : &quot;NongoDB是一个NoSQL数据库&quot;, &quot;by&quot; : &quot;fan106707&quot; } &gt; db.col.remove({&quot;title&quot;:&quot;MongoDB&quot;},1) WriteResult({ &quot;nRemoved&quot; : 1 }) &gt; db.col.find() { &quot;_id&quot; : ObjectId(&quot;590e99f7b0f84710b59ab4cc&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;description&quot; : &quot;NongoDB是一个NoSQL数据库&quot;, &quot;by&quot; : &quot;fan106707&quot; } &gt; 上例中，通过find()查询知集合中有两个文档，通过remove()删掉符合&quot;title&quot; : &quot;MongoDB&quot;中的一个，再查询可见，第一个符合条件的文档已被删除。如果justOne不指定为1或true，则符合条件的都会被删除。若希望删除集合中所有数据，则使用db.collection.remove({})。 查询文档首先，之前用了很多次的db.collection.find()就是用来查询集合内所有文档的；当需要查询符合某些特定条件的文档时，使用命令db.collection.find(query, projection).参数说明： query ：可选，使用查询操作符指定查询条件 projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。 此外，可以通过db.collection.find().pretty()以格式化的方式来读取所有文档数据。例如： &gt; db.col.find({&quot;by&quot;:&quot;fan106707&quot;}).pretty() { &quot;_id&quot; : ObjectId(&quot;590e99f7b0f84710b59ab4cc&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;description&quot; : &quot;NongoDB是一个NoSQL数据库&quot;, &quot;by&quot; : &quot;fan106707&quot; } &gt; 下面这个图表可以帮助理解一些常用的条件查询语句： MongoDB 的 AND 条件查询： 在find()方法传入多个键(key)，每个键(key)以逗号隔开。MongoDB 的 OR 条件查询语法：db.col.find( { $or: [ {key1: value1}, {key2:value2} ] } ) part2 初识Express动态博客&ensp; step1 初始化一个 Express 项目首先，首先，新建一个目录 monblog，在该目录下运行 npm init 生成一个 package.json，如下所示：123456789101112131415161718192021222324252627282930313233343536D:\\Express_Projects\\monblog&gt;npm initThis utility will walk you through creating a package.json file.It only covers the most common items, and tries to guess sensible defaults.See `npm help json` for definitive documentation on these fieldsand exactly what they do.Use `npm install &lt;pkg&gt; --save` afterwards to install a package andsave it as a dependency in the package.json file.Press ^C at any time to quit.name: (monblog)version: (1.0.0)description: just for a testentry point: (index.js)test command:git repository:keywords:author: fanfanlicense: (ISC)About to write to D:\\Express_Projects\\monblog\\package.json:&#123; &quot;name&quot;: &quot;monblog&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;just for a test&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, &quot;author&quot;: &quot;fanfan&quot;, &quot;license&quot;: &quot;ISC&quot;&#125;Is this ok? (yes) y 然后，安装 express 并写入 package.json D:\\Express_Projects\\monblog&gt;npm i express@4.14.0 --save monblog@1.0.0 D:\\Express_Projects\\monblog 新建index.js文件，代码如下 var express = require(&apos;express&apos;); var app = express(); app.get(&apos;/&apos;, function(req, res) { res.send(&apos;hello, express&apos;); }); app.listen(3000); 此处生成了一个express实例app，挂载了一个根路由器，然后监听3000端口并启动程序。运行node index，打开浏览器访问localhost:3000时，页面显示hello，express。 在开发过程中，每次修改代码保存后都要重启程序才能看到改动效果，使用supervisor可以解决这个繁琐的问题。首先通过npm install -g supervisor全局安装，然后通过supervisor --harmony index 启动程序。supervisor会监听当前目录下的所有node和js后缀的文件，当这些文件发生改动时，supervisor会自动重启程序。 step2 路由&ensp;上面的index.js文件中的代码app.get(&#39;/&#39;, function(req, res) {res.send(&#39;hello, express&#39;); });表示访问根路径时，返回 hello, express。如果在index.js中添加app.get(&#39;/users/:name&#39;, function(req, res) {res.send(&#39;hello, &#39; + req.params.name); });表示当访问路由为localhost:3000/users/haha时将返回hello,haha。路径中 :name起了占位符的作用，这个占位符的名字是 name，可以通过 req.params.name 取到实际的值。几个常用的 req 的属性： req.query: 解析后的 url 中的 querystring，如 ?name=haha，req.query 的值为 {name: &#39;haha&#39;} req.params: 解析 url 中的占位符，如 /:name，访问 /haha，req.params 的值为 {name: &#39;haha&#39;} req.body: 解析后请求体，需使用相关的模块，如 body-parser，请求体为 {&quot;name&quot;: &quot;haha&quot;}，则 req.body 为 {name: &#39;haha&#39;} &ensp;实际开发过程中将所有路由控制函数都放到了 index.js文件中是不可取的做法，实际开发中通常有几十甚至上百的路由，都写在 index.js 既臃肿又不好维护，可以使用 express.Router 实现更优雅的路由解决方案。在 monblog 目录下创建空文件夹 routes，在 routes 目录下创建 index.js 和 users.js，&ensp;index.js123456789var express = require(&apos;express&apos;);var app = express();var indexRouter = require(&apos;./routes/index&apos;);var userRouter = require(&apos;./routes/users&apos;);app.use(&apos;/&apos;, indexRouter);app.use(&apos;/users&apos;, userRouter);app.listen(3000); routes/index.js12345678var express = require(&apos;express&apos;);var router = express.Router();router.get(&apos;/&apos;, function(req, res) &#123; res.send(&apos;hello, express&apos;);&#125;);module.exports = router; routes/users.js12345678var express = require(&apos;express&apos;);var router = express.Router();router.get(&apos;/:name&apos;, function(req, res) &#123; res.send(&apos;hello, &apos; + req.params.name);&#125;);module.exports = router; 通过这种方法将 / 和 /users/:name的路由分别放到了 routes/index.js和 routes/users.js 中，每个路由文件通过生成一个 express.Router 实例 router 并导出，通过 app.use挂载到不同的路径。 step2 模板引擎&ensp;模板引擎（Template Engine）是一个将页面模板和数据结合起来生成 html 的工具。模板引擎有很多，ejs 是其中一种，它使用起来十分简单，而且与 express 集成良好。通过命令npm i ejs --save安装ejs。","tags":[{"name":"实习","slug":"实习","permalink":"http://fan106707@github.io/tags/实习/"},{"name":"mongodb","slug":"mongodb","permalink":"http://fan106707@github.io/tags/mongodb/"}]},{"title":"Node.js实习 Day3（看我看我）","date":"2017-06-14T03:30:11.000Z","path":"2017/06/14/day3/","text":"目标： 理解Git的基本概念，作用及基本操作，Git和GitHub如何配合使用。 根据教程使用Hexo与GitHub搭建个人静态博客。 Part1 Git概念及作用Git是一个分布式版本控制系统，是为了更好地管理Linux内核开发而创立的。也就是用来更好地进行版本管理的。分布式：分布式的版本控制就是每个人都可以创建一个独立的代码仓库用于管理，各种版本控制的操作都可以在本地完成。每个人修改的代码都可以推送合并到另外一个代码仓库中。 Git和GitHub的区别： git是一种版本控制系统。跟svn、cvs是同级的概念。 github是一个网站，给用户提供git服务。这样就不用自己部署git系统，直接用注册一个账号就可以使用GitHub提供的git服务。 Part2 Git的基本操作 add commit clone pull push checkout gitignore part3 静态博客与动态博客GitHub 有一个 GitHub Pages 功能，可以托管静态网页。所以我们可以利用 GitHub 来搭建自己的免费个人静态博客。Hexo 是一个使用 Node 编写的静态网页生成工具，可以根据给定的 Markdown 文件来生成一个漂亮的静态网页（一般用作博客）。 静态博客可以部署在 GitHub，随时随地可以访问而且是免费的。 实习最终要完成的 Express 版的博客属于动态博客，Express 博客默认在本机运行，只能局域网访问，如果希望在别的地方也能访问，需要租用服务器。动态博客的html、css、js文件可以是动态生成的。 part4 搭建一个静态博客&ensp; step1 安装Node.js 和Git之前都安装并配置好参数了可通过 node -v和git --version确认 step2 注册GitHub账号 打开https://github.com/，在下图的框中，分别输入自己的用户名，邮箱，密码，收到邮件后要确认注册才能成功。 注册好后登陆GitHub，选择New repository创建代码库,仓库名称是fan106707.github.io，创建好后在Setting下开启gh-pages功能。 生成SSH密钥，执行命令ssh-keygen -t rsa -C “fan106707@163.com”，连按三个回车，密码为空。之后会在.ssh 下生成公私密钥对。将公钥文件中的内容复制。打开GitHub账号下的Setting，选择SSH and GPG keys 将公钥文件中的内容添加为新的密钥。 step3 安装Hexo在D盘下右键鼠标选择Git Bash，使用如下命令进行Hexo的安装先npm install hexo-cli -g，后npm install hexo --save最后通过hexo -v查看是否安装成功 step4 创建Hexo项目 在D:\\Hexo下右键鼠标选择Git Bash，然后执行命令hexo init进行Hexo项目的初始化 执行命令npm install 安装项目依赖,之后npm将会自动安装需要的组件，只需要等待npm操作即可。 依赖安装好后，Hexo项目就算创建成功了。接下来在本地查看Hexo站点。&ensp;&ensp;&ensp;&ensp; 输入hexo g 生成静态文件&ensp;&ensp;&ensp;&ensp; 输入hexo s 启动本地服务，按照提示访问http://localhost:4000就可以看到以下界面： step5 修改Hexo项目全局配置文件了解Hexo的目录结构，其中的可操作配置很多，比较重要的是_config.yml 文件的配置 网站配置 Deployment配置 step6 部署到GitHub上先执行hexo g生成静态文件，再执行hexo d进行部署,部署成功后，命令行上会提示Deploy done: git。访问http://fan106707.hithub.io就看到了新鲜出炉的个人静态博客。 总结：这一天的内容是目前所有实习任务里最喜欢的一个。前两周的内容我觉得比较无聊。一是学的内容很枯燥，算了，哪一门语言刚开始看的时候不是枯燥乏味的呢，肯定是因为我的浅尝辄止，没有深入体会到它的精髓，无法体验它的强大，它的巧妙，我们在不同的世界，嗯肯定是这样的。还有一个原因是对所学的知识不能及时地反馈，看不见具体的成效。所以这也就是为什么今天的内容我特别喜欢的原因了。GitHub很吸引我，有很多优秀的开源项目，当然对于现在的我来说，在于它有很多“适龄”的教程，而且提供源代码，有助于学习和理解。以前都是看别人的技术博客，现在也搭建了属于自己一个小小博客，其实内心是很激动的！！！即使它现在还是很简陋，也还没有自己的专属域名哈哈搭建的过程踩了无数的坑，只是当时没有好好记录所以现在也想不起来都是些什么乱七八槽的报错了，感觉什么样的都有吧。每次报错，首先检查是不是哪一步没按着教程走，不行再查看报错的信息，是哪个文件哪一行写得不对，或者是缺少了什么。一遍遍地百度，谷歌，看各种经验帖，明明英文那么烂还是要作死般地尝试看懂官方文档，好像最后也没看懂吧哈哈。为什么不先看报错信息？因为我不想看英文字母啊啊啊。依稀记得是在尝试部署了N+N次之后，代码已经改到我早都不记得原来是什么样了，那些执着如一的红色ERROR一遍遍跳动在黑色的框框里，我仿佛感受到了近乎绝望的挫败感。今天有人跟我说，都是一步一步走的嘛，虽然我没有回复下文，其实心里还是挺受用的。悄悄地鼓励自己，加油~","tags":[{"name":"实习","slug":"实习","permalink":"http://fan106707@github.io/tags/实习/"},{"name":"GitHub","slug":"GitHub","permalink":"http://fan106707@github.io/tags/GitHub/"}]},{"title":"Node.js实习 Day2-Markdown（这里可以看一下）","date":"2017-06-13T10:30:11.000Z","path":"2017/06/13/day2_markdown/","text":"Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 — 百度百科 Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它来写博客。个人才疏学浅啦，所以这里只涉及了很简单的一部分，更多语法详见Markdown语法说明。 Part1： 标题&ensp;&ensp;&ensp;&ensp;标题能显示出文章的结构。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶。例如： # Header1 ## Header2 ### Header3 #### Header4 ##### Header5 ###### Header6 &ensp;&ensp;&ensp;&ensp;等比例效果就是下面这样子滴： Part2：列表&ensp;&ensp;&ensp;&ensp;在 Markdown 下，列表的显示只需要在文字前加上-或 *即可变为无序列表，有序列表则直接在文字前加1. 2. 3.符号，记得要和文字之间加上一个字符的空格。&ensp;&ensp;&ensp;&ensp;例如无序的： - sentence1 - sentence2 - sentence3 &ensp;&ensp;&ensp;&ensp;就会变成下面这样子滴： sentence1 sentence2 sentence3 &ensp;&ensp;&ensp;&ensp;再看下有序的： 1. sentence1 2. sentence2 3. sentence3 &ensp;&ensp;&ensp;&ensp;就会变成这样滴： sentence1 sentence2 sentence3 Part3：引用&ensp;&ensp;&ensp;&ensp;我们自己写博文有时会引用到他人的言论，markdown也提供了引用格式。在引用段落前使用&gt;即可。&ensp;&ensp;&ensp;&ensp;例如： &gt; 这就是一个引用 &ensp;&ensp;&ensp;&ensp;效果如下，引用段落的背景会有特别标记： 这就是一个引用 Part4：代码&ensp;&ensp;&ensp;&ensp;想在markdown的文本中添加代码也很简单，有两种方式。&ensp;&ensp;&ensp;&ensp;1. 直接在句子中添加，形如`type your code here` 即可（注意了` 是反引号，在esc键的下面那个，不要看成单引号了）。&ensp;&ensp;&ensp;&ensp;2. 添加一个代码块，这也简单，代码段前缩进即可，用Tab键或者四个空格都行。例如：&ensp;&ensp;&ensp;&ensp;得到： type your code here type your code here type your code here type your code here &ensp;&ensp;&ensp;&ensp;然后比较高级一点的是使用加强的代码块示例如下：&ensp;&ensp;&ensp;&ensp;非编程语言代码：&ensp;&ensp;&ensp;&ensp;得到： 1$ sudo apt-get install vim-gnome &ensp;&ensp;&ensp;&ensp;Python 示例： &ensp;&ensp;&ensp;&ensp;得到： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' &ensp;&ensp;&ensp;&ensp;JavaScript 示例：&ensp;&ensp;&ensp;&ensp;得到： 1234567891011121314151617/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); Part5：图片与链接&ensp;&ensp;&ensp;&ensp;1.添加图片格式：![描述](图片url).&ensp;&ensp;&ensp;&ensp;2.添加连接格式：[描述](链接地址),和图片添加很相似，少一个!。&ensp;&ensp;&ensp;&ensp;这是最简单的用法，如需调整图片长宽等可直接使用html的标签添加图片。 Part6：相关的参考来源感谢下面这些公开资源让我学到了很多 Markdown语法说明（中文简体版） Markdown进阶语法整理–作者:黄学涛 Markdown——入门指南–作者：Te_Lee Cmd Markdown 简明语法手册","tags":[{"name":"实习","slug":"实习","permalink":"http://fan106707@github.io/tags/实习/"},{"name":"markdown","slug":"markdown","permalink":"http://fan106707@github.io/tags/markdown/"}]},{"title":"Node.js实习 Day2-Javascript（什么都没有）","date":"2017-06-13T03:30:11.000Z","path":"2017/06/13/day1_Javascript/","text":"目标： 理解Javascript基本语法，能够在Node.js环境下编写一些简单的程序。 理解Node.js编程环境，NPM、异步概念，require原理。 安装Git客户端，注册GitHub账号。（选做）","tags":[{"name":"实习","slug":"实习","permalink":"http://fan106707@github.io/tags/实习/"},{"name":"Javascript","slug":"Javascript","permalink":"http://fan106707@github.io/tags/Javascript/"}]},{"title":"Node.js实习 Day1-开篇（还是看一下吧）","date":"2017-06-12T03:30:30.000Z","path":"2017/06/12/day1/","text":"首先发个声明，实习笔记不是当时及时做好的，但是现在临近实习结束，回想实习的这段时间，我到底收获了什么，学到了哪一些知识，掌握哪一个技能，我的脑袋有点乱，因此想赶在实习将尽之际，又恰巧这一周没什么需要马上考试的科目，时间还算富余，所以打算把这段时间以来所做的一些东西整理成系列笔记，尽量给自己留下点什么。我不是一个目标特别明确的人，有时很茫然，不知道自己到底该做什么。即无知，亦无畏，就先做好眼前的事。 Part1 实习概要主要做了以下几个内容第一二周：学习Javascript语言第三周：学习Github和Hexo，搭建一个静态博客，也就是现在看到的这个了。第四周：学习如何使用MongoDb第五六周：1. 了解Web前端的概念 &ensp;&ensp;2. 了解HTML/CSS的作用 &ensp;&ensp; 3. 根据教程搭建一个简单的动态博客。第七周：1. 给动态博客的编辑模块加上markdown预览功能。 &ensp;&ensp;2. 使用JS编写简单的爬虫。 Part2 第一天的内容 上Node.js官网下载并安装程序. 初步体验Node.js的环境。打开powershell或者cmd，输入node，回车后即可进入node.js 的交互环境。在这里可以尝试输入一些简单的语句。连按两次Ctrl+C即可退出。 结语：这一天的内容到这结束了，给我的感觉是很微妙的，面对新的事物，新的世界，总有一种莫名的心慌慌，仿佛新世界的大门将开未开，而我在云里雾里，小心翼翼。但是，这两周的内容才刚开始。接下来是学习Javascript语言。","tags":[{"name":"实习","slug":"实习","permalink":"http://fan106707@github.io/tags/实习/"},{"name":"nodejs","slug":"nodejs","permalink":"http://fan106707@github.io/tags/nodejs/"}]},{"title":"不必慢","date":"2017-05-04T14:45:40.000Z","path":"2017/05/04/try2/","text":"时常将自己困在某个空间只看眼前一方天地只见身旁好友三两做一件事，两件事便能花上一天的时间玩起手机来也能花上半天时间每日清晨早起为的是多点时间慢慢发呆可是啊时间一天天流逝，哪有那么多光阴任人蹉跎二十多岁是一个向前看的年纪向前看，不必慢不管一个人还是两个人走远了才能遇见更多风景走远了的人才有资格慢下来到时再细细回味是一路荆棘，还是一路芬芳","tags":[{"name":"随笔","slug":"随笔","permalink":"http://fan106707@github.io/tags/随笔/"}]},{"title":"Hello World","date":"2017-04-22T07:40:24.286Z","path":"2017/04/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]